# JavaScript & CSS Exam Cheatsheet - One Page Double Sided

## JAVASCRIPT ESSENTIALS
### Variables & Data Types
let name = "value"; const id = 42; var avoid; // string, number, boolean, array[], object{}, null, undefined

### Objects & Arrays
const book = {id: 42, title: "Guide", genres: ["Sci-Fi", "Comedy"]};
book.title; book["title"]; // Access properties
array.push(item); array.map(callback); array.filter(callback); array.join(", ");

### Template Literals
const html = `<div class="card"><h1>${title}</h1></div>`;

### Functions
function name(param) { return param * 2; }
const arrow = (param) => param * 2;
async function fetchData() { const response = await fetch(url); return response.json(); }

### DOM Manipulation
document.getElementById("id"); document.querySelector(".class");
element.innerHTML = "content"; element.addEventListener("click", handler);

### Event Listeners
element.addEventListener("change", (e) => console.log(e.target.value));

## ASYNC/AWAIT & API FETCHING
### Modern Fetch Pattern
async function fetchData() {
    try {
        const response = await fetch("https://api.example.com/data");
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const data = await response.json();
        return data;
    } catch (error) {
        console.error("Error:", error);
        return null;
    }
}

### Error Handling
try { const result = await riskyOperation(); } 
catch (error) { console.error("Error:", error.message); }

## CSS FUNDAMENTALS
### Selectors
div { color: blue; } .class { color: red; } #id { color: green; }
.parent .child { color: purple; } .parent > .child { color: orange; }
a:hover { color: red; } input[type="text"] { border: 1px solid #ccc; }

### Box Model
.element { width: 300px; height: 200px; padding: 20px; border: 2px solid #000; margin: 10px; box-sizing: border-box; }

### Typography & Colors
.text { font-family: Arial; font-size: 16px; font-weight: bold; text-align: center; text-transform: uppercase; color: #333; }
color: red; color: #ff0000; color: rgb(255,0,0); color: rgba(255,0,0,0.5);

## FLEXBOX LAYOUT
### Container
.flex-container { display: flex; flex-direction: row; justify-content: center; align-items: center; flex-wrap: wrap; gap: 20px; }

### Items
.flex-item { flex-grow: 1; flex-shrink: 1; flex-basis: 200px; flex: 1 1 200px; align-self: center; }

### Common Patterns
.center { display: flex; justify-content: center; align-items: center; height: 100vh; }
.columns { display: flex; gap: 20px; } .column { flex: 1; }

## CSS GRID LAYOUT
### Container
.grid-container { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; }

### Items
.grid-item { grid-column: 1 / 3; grid-row: 1 / 2; justify-self: center; align-self: center; }

### Responsive Grid
@media (max-width: 768px) { .grid-container { grid-template-columns: repeat(2, 1fr); } }
@media (max-width: 480px) { .grid-container { grid-template-columns: 1fr; } }

## RESPONSIVE DESIGN
### Viewport & Media Queries
<meta name="viewport" content="width=device-width, initial-scale=1.0">
@media (min-width: 768px) { .container { width: 750px; margin: 0 auto; } }
/* Breakpoints: Mobile 320-767px, Tablet 768-1023px, Desktop 1024px+ */

### Responsive Images
img { max-width: 100%; height: auto; }
.image-container { width: 100%; height: 200px; overflow: hidden; }
.image-container img { width: 100%; height: 100%; object-fit: cover; }

## CSS EFFECTS & ANIMATIONS
### Transitions & Transform
.element { transition: all 0.3s ease; }
.hover-effect:hover { transform: translateY(-5px); box-shadow: 0 8px 15px rgba(0,0,0,0.2); }
transform: translateX(10px); transform: scale(1.2); transform: rotate(45deg);

### Box Shadow
.shadow { box-shadow: 0 2px 4px rgba(0,0,0,0.1); }

## COMMON PATTERNS FROM TASKS
### Card Layout
.card { background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); display: flex; flex-direction: column; height: 100%; }
.card:hover { transform: translateY(-5px); box-shadow: 0 8px 15px rgba(0,0,0,0.2); }
.card-image { width: 100%; height: 200px; overflow: hidden; display: flex; align-items: center; justify-content: center; }
.card-image img { width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease; }
.card-content { padding: 20px; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between; }

### Filter/Dropdown
.filter-container { max-width: 1200px; margin: 0 auto 30px auto; padding: 20px; background: white; border-radius: 12px; }
.filter-wrapper { display: flex; align-items: center; gap: 15px; flex-wrap: wrap; }
.filter-wrapper select { padding: 10px 15px; border: 2px solid #ddd; border-radius: 8px; transition: border-color 0.3s ease; }
.filter-wrapper select:focus { outline: none; border-color: #007bff; }

## JAVASCRIPT ARRAY METHODS
const numbers = [1, 2, 3, 4, 5];
numbers.map(num => num * 2); numbers.filter(num => num % 2 === 0); numbers.find(num => num > 3);
numbers.every(num => num > 0); numbers.some(num => num % 2 === 0); numbers.reduce((acc, num) => acc + num, 0);
numbers.sort((a, b) => a - b); [...new Set(array)]; array.join(", ");
